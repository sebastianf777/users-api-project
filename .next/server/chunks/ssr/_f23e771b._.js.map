{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file://F%3A/0-F-Programming/1-portfolio/1-nextjs-projects/1-nextjs-users-api/src/services/user.service.ts"],"sourcesContent":["export type Geo = {\r\n    lat: string;\r\n    lng: string;\r\n};\r\n\r\nexport type Address = {\r\n    street: string;\r\n    suite: string;\r\n    city: string;\r\n    zipcode: string;\r\n    geo: Geo;\r\n};\r\n\r\nexport type Company = {\r\n    name: string;\r\n    catchPhrase: string;\r\n    bs: string;\r\n};\r\n\r\nexport type User = {\r\n    id: number;\r\n    name: string;\r\n    username: string;\r\n    email: string;\r\n    address: Address;\r\n    phone: string;\r\n    website: string;\r\n    company: Company;\r\n};\r\n\r\nexport type Todo = {\r\n    userId: number;\r\n    id: number;\r\n    title: string;\r\n    completed: boolean;\r\n}\r\n\r\nexport type Post = {\r\n    userId: number;\r\n    id: number;\r\n    title: string;\r\n    body: string;\r\n}\r\n\r\nexport type Album = {\r\n    userId: number;\r\n    id: number;\r\n    body: string;\r\n}\r\n\r\nexport async function getUsers(): Promise<User[]> {\r\n    const res = await fetch('https://jsonplaceholder.typicode.com/users');\r\n    if (!res.ok) {\r\n        throw new Error('Error al obtener los usuarios');\r\n    }\r\n\r\n    const data: User[] = (await res.json()) as User[];\r\n\r\n    return data.map((user) => {\r\n        const { lat, lng } = user.address.geo;\r\n        return {\r\n            ...user,\r\n            address: {\r\n                ...user.address,\r\n                coords: `${lat}, ${lng}`,\r\n            },\r\n        };\r\n    });\r\n}\r\n\r\nexport async function getUserById(id: string): Promise<User> {\r\n    const res = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n    if (!res.ok) {\r\n        throw new Error(`Error fetching user with id ${id}`);\r\n    }\r\n    return await res.json() as Promise<User>;\r\n}\r\n\r\nexport async function getPostsByUserId(id: string): Promise<Post[]> {\r\n    const res = await fetch(`https://jsonplaceholder.typicode.com/users/${id}/posts`);\r\n    if (!res.ok) {\r\n        throw new Error(`Error fetching user with id ${id}`);\r\n    }\r\n    return await res.json() as Promise<Post[]>;\r\n}\r\n\r\nexport async function getAlbumsByUserId(id: string): Promise<Album[]> {\r\n    const res = await fetch(`https://jsonplaceholder.typicode.com/users/${id}/albums`);\r\n    if (!res.ok) {\r\n        throw new Error(`Error fetching user with id ${id}`);\r\n    }\r\n    return await res.json() as Promise<Album[]>;\r\n}\r\n\r\nexport async function getTodosByUserId(id: string): Promise<Todo[]> {\r\n    const res = await fetch(`https://jsonplaceholder.typicode.com/users/${id}/todos`);\r\n    if (!res.ok) {\r\n        throw new Error(`Error fetching user with id ${id}`);\r\n    }\r\n    return await res.json() as Promise<Todo[]>;\r\n}"],"names":[],"mappings":";;;;;;;AAkDO,eAAe;IAClB,MAAM,MAAM,MAAM,MAAM;IACxB,IAAI,CAAC,IAAI,EAAE,EAAE;QACT,MAAM,IAAI,MAAM;IACpB;IAEA,MAAM,OAAgB,MAAM,IAAI,IAAI;IAEpC,OAAO,KAAK,GAAG,CAAC,CAAC;QACb,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,KAAK,OAAO,CAAC,GAAG;QACrC,OAAO;YACH,GAAG,IAAI;YACP,SAAS;gBACL,GAAG,KAAK,OAAO;gBACf,QAAQ,GAAG,IAAI,EAAE,EAAE,KAAK;YAC5B;QACJ;IACJ;AACJ;AAEO,eAAe,YAAY,EAAU;IACxC,MAAM,MAAM,MAAM,MAAM,CAAC,2CAA2C,EAAE,IAAI;IAC1E,IAAI,CAAC,IAAI,EAAE,EAAE;QACT,MAAM,IAAI,MAAM,CAAC,4BAA4B,EAAE,IAAI;IACvD;IACA,OAAO,MAAM,IAAI,IAAI;AACzB;AAEO,eAAe,iBAAiB,EAAU;IAC7C,MAAM,MAAM,MAAM,MAAM,CAAC,2CAA2C,EAAE,GAAG,MAAM,CAAC;IAChF,IAAI,CAAC,IAAI,EAAE,EAAE;QACT,MAAM,IAAI,MAAM,CAAC,4BAA4B,EAAE,IAAI;IACvD;IACA,OAAO,MAAM,IAAI,IAAI;AACzB;AAEO,eAAe,kBAAkB,EAAU;IAC9C,MAAM,MAAM,MAAM,MAAM,CAAC,2CAA2C,EAAE,GAAG,OAAO,CAAC;IACjF,IAAI,CAAC,IAAI,EAAE,EAAE;QACT,MAAM,IAAI,MAAM,CAAC,4BAA4B,EAAE,IAAI;IACvD;IACA,OAAO,MAAM,IAAI,IAAI;AACzB;AAEO,eAAe,iBAAiB,EAAU;IAC7C,MAAM,MAAM,MAAM,MAAM,CAAC,2CAA2C,EAAE,GAAG,MAAM,CAAC;IAChF,IAAI,CAAC,IAAI,EAAE,EAAE;QACT,MAAM,IAAI,MAAM,CAAC,4BAA4B,EAAE,IAAI;IACvD;IACA,OAAO,MAAM,IAAI,IAAI;AACzB","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file://F%3A/0-F-Programming/1-portfolio/1-nextjs-projects/1-nextjs-users-api/src/components/search-bar/search-bar.tsx"],"sourcesContent":["type SearchBarProps = {\r\n    defaultValue: string;\r\n    name: string;\r\n    placeholder?: string;\r\n}\r\n\r\nconst SearchBar = ({ defaultValue, name, placeholder  }:SearchBarProps) => {\r\n    return (\r\n        <input\r\n            type={\"text\"}\r\n            defaultValue={defaultValue}\r\n            name={name}\r\n            placeholder={placeholder}\r\n            className={\"border border-gray-300 rounded p-2 autofill:bg-yellow-200\"}\r\n        />\r\n    );\r\n};\r\n\r\nexport default SearchBar;\r\n"],"names":[],"mappings":";;;;;AAMA,MAAM,YAAY,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,WAAW,EAAkB;IAClE,qBACI,8OAAC;QACG,MAAM;QACN,cAAc;QACd,MAAM;QACN,aAAa;QACb,WAAW;;;;;;AAGvB;uCAEe","debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file://F%3A/0-F-Programming/1-portfolio/1-nextjs-projects/1-nextjs-users-api/src/components/filter-form/filter-form.tsx"],"sourcesContent":["import SearchBar from '@/components/search-bar/search-bar';\r\nimport { ColumnDefinition } from '@/utils/filter-and-paginate';\r\n\r\nexport type FilterFormProps = {\r\n    allColumns: ColumnDefinition[];\r\n    filterColumn: string;\r\n    filterValue: string;\r\n    selectedColumns: string[];\r\n    itemsPerPage: number;\r\n    sortColumn: string;\r\n    sortOrder: 'asc' | 'desc';\r\n};\r\n\r\nexport default function FilterForm({\r\n                                       allColumns,\r\n                                       filterColumn,\r\n                                       filterValue,\r\n                                       selectedColumns,\r\n                                       itemsPerPage,\r\n                                       sortColumn,\r\n                                       sortOrder,\r\n                                   }: FilterFormProps) {\r\n    return (\r\n        <form method={\"get\"} className={\"mb-4 flex flex-col gap-4\"}>\r\n            <div className={\"flex gap-4 items-end flex-wrap\"}>\r\n                <div className=\"flex flex-col sm:flex-row  gap-4 \">\r\n                    <div>\r\n                        <label htmlFor={'filterColumn'} className={'block font-semibold mb-1'}>\r\n                            Filter Column:\r\n                        </label>\r\n                        <select\r\n                          id={'filterColumn'}\r\n                          name={'filterColumn'}\r\n                          defaultValue={filterColumn}\r\n                          className={'border border-gray-300 rounded p-2'}\r\n                        >\r\n                            <option value={'all'}>(All)</option>\r\n                            {allColumns.map((col) => (\r\n                              <option key={col.key} value={col.key}>\r\n                                  {col.header}\r\n                              </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor={'filterValue'} className={'block font-semibold mb-1'}>\r\n                            Filter Value:\r\n                        </label>\r\n                        <SearchBar\r\n                          defaultValue={filterValue}\r\n                          name={'filterValue'}\r\n                          placeholder={'Enter search term...'}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={\"flex flex-col sm:flex-row  gap-4 \"}>\r\n                    <div>\r\n                        <label htmlFor={'sortColumn'} className={'block font-semibold mb-1'}>\r\n                        Sort Column:\r\n                        </label>\r\n                        <select\r\n                          id={'sortColumn'}\r\n                          name={'sortColumn'}\r\n                          defaultValue={sortColumn}\r\n                          className={'border border-gray-300 rounded p-2'}\r\n                        >\r\n                            <option value={'none'}>(None)</option>\r\n                            {allColumns.map((col) => (\r\n                              <option key={col.key} value={col.key}>\r\n                                  {col.header}\r\n                              </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor={'sortOrder'} className={'block font-semibold mb-1'}>\r\n                        Sort Order:\r\n                    </label>\r\n\r\n                        <select\r\n                          id={'sortOrder'}\r\n                          name={'sortOrder'}\r\n                          defaultValue={sortOrder}\r\n                          className={'border border-gray-300 rounded p-2'}\r\n                        >\r\n                            <option value={'asc'}>Ascending</option>\r\n                            <option value={'desc'}>Descending</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={\"flex gap-4 items-end justify-between flex-wrap\"}>\r\n                <div className={\"flex flex-col gap-2\"}>\r\n                    <span className={\"font-semibold\"}>Display Columns:</span>\r\n                    <div className={\"flex gap-4 flex-wrap\"}>\r\n                        {allColumns.map((col) => (\r\n                            <label key={col.key} className={\"flex items-center gap-1\"}>\r\n                                <input\r\n                                    type={\"checkbox\"}\r\n                                    name={\"columns\"}\r\n                                    value={col.key}\r\n                                    defaultChecked={\r\n                                        selectedColumns.length > 0 ? selectedColumns.includes(col.key) : true\r\n                                    }\r\n                                    className={\"border border-gray-300 rounded \"}\r\n                                />\r\n                                {col.header}\r\n                            </label>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <div className={\"flex flew-col items-center\"}>\r\n                    <label htmlFor={\"itemsPerPage\"} className={\"block font-semibold mb-1 mr-2\"}>\r\n                        Items Per Page:\r\n                    </label>\r\n                    <select\r\n                        id={\"itemsPerPage\"}\r\n                        name={\"itemsPerPage\"}\r\n                        defaultValue={String(itemsPerPage)}\r\n                        className={\"border border-gray-300 rounded p-2\"}\r\n                    >\r\n                        <option value={\"5\"}>5</option>\r\n                        <option value={\"10\"}>10</option>\r\n                        <option value={\"15\"}>15</option>\r\n                        <option value={\"20\"}>20</option>\r\n                    </select>\r\n\r\n\r\n\r\n                </div>\r\n                <button type={\"submit\"} className={\"p-2 bg-terciary hover:bg-secondary text-white rounded  cursor-pointer \"}>\r\n                    Apply Filters\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;;AAae,SAAS,WAAW,EACI,UAAU,EACV,YAAY,EACZ,WAAW,EACX,eAAe,EACf,YAAY,EACZ,UAAU,EACV,SAAS,EACK;IACjD,qBACI,8OAAC;QAAK,QAAQ;QAAO,WAAW;;0BAC5B,8OAAC;gBAAI,WAAW;;kCACZ,8OAAC;wBAAI,WAAU;;0CACX,8OAAC;;kDACG,8OAAC;wCAAM,SAAS;wCAAgB,WAAW;kDAA4B;;;;;;kDAGvE,8OAAC;wCACC,IAAI;wCACJ,MAAM;wCACN,cAAc;wCACd,WAAW;;0DAET,8OAAC;gDAAO,OAAO;0DAAO;;;;;;4CACrB,WAAW,GAAG,CAAC,CAAC,oBACf,8OAAC;oDAAqB,OAAO,IAAI,GAAG;8DAC/B,IAAI,MAAM;mDADF,IAAI,GAAG;;;;;;;;;;;;;;;;;0CAM9B,8OAAC;;kDACG,8OAAC;wCAAM,SAAS;wCAAe,WAAW;kDAA4B;;;;;;kDAGtE,8OAAC,oJAAA,CAAA,UAAS;wCACR,cAAc;wCACd,MAAM;wCACN,aAAa;;;;;;;;;;;;;;;;;;kCAIvB,8OAAC;wBAAI,WAAW;;0CACZ,8OAAC;;kDACG,8OAAC;wCAAM,SAAS;wCAAc,WAAW;kDAA4B;;;;;;kDAGrE,8OAAC;wCACC,IAAI;wCACJ,MAAM;wCACN,cAAc;wCACd,WAAW;;0DAET,8OAAC;gDAAO,OAAO;0DAAQ;;;;;;4CACtB,WAAW,GAAG,CAAC,CAAC,oBACf,8OAAC;oDAAqB,OAAO,IAAI,GAAG;8DAC/B,IAAI,MAAM;mDADF,IAAI,GAAG;;;;;;;;;;;;;;;;;0CAM9B,8OAAC;;kDACG,8OAAC;wCAAM,SAAS;wCAAa,WAAW;kDAA4B;;;;;;kDAIpE,8OAAC;wCACC,IAAI;wCACJ,MAAM;wCACN,cAAc;wCACd,WAAW;;0DAET,8OAAC;gDAAO,OAAO;0DAAO;;;;;;0DACtB,8OAAC;gDAAO,OAAO;0DAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAMvC,8OAAC;gBAAI,WAAW;;kCACZ,8OAAC;wBAAI,WAAW;;0CACZ,8OAAC;gCAAK,WAAW;0CAAiB;;;;;;0CAClC,8OAAC;gCAAI,WAAW;0CACX,WAAW,GAAG,CAAC,CAAC,oBACb,8OAAC;wCAAoB,WAAW;;0DAC5B,8OAAC;gDACG,MAAM;gDACN,MAAM;gDACN,OAAO,IAAI,GAAG;gDACd,gBACI,gBAAgB,MAAM,GAAG,IAAI,gBAAgB,QAAQ,CAAC,IAAI,GAAG,IAAI;gDAErE,WAAW;;;;;;4CAEd,IAAI,MAAM;;uCAVH,IAAI,GAAG;;;;;;;;;;;;;;;;kCAe/B,8OAAC;wBAAI,WAAW;;0CACZ,8OAAC;gCAAM,SAAS;gCAAgB,WAAW;0CAAiC;;;;;;0CAG5E,8OAAC;gCACG,IAAI;gCACJ,MAAM;gCACN,cAAc,OAAO;gCACrB,WAAW;;kDAEX,8OAAC;wCAAO,OAAO;kDAAK;;;;;;kDACpB,8OAAC;wCAAO,OAAO;kDAAM;;;;;;kDACrB,8OAAC;wCAAO,OAAO;kDAAM;;;;;;kDACrB,8OAAC;wCAAO,OAAO;kDAAM;;;;;;;;;;;;;;;;;;kCAM7B,8OAAC;wBAAO,MAAM;wBAAU,WAAW;kCAA0E;;;;;;;;;;;;;;;;;;AAM7H","debugId":null}},
    {"offset": {"line": 451, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 457, "column": 0}, "map": {"version":3,"sources":["file://F%3A/0-F-Programming/1-portfolio/1-nextjs-projects/1-nextjs-users-api/src/components/pagination/pagination.tsx"],"sourcesContent":["import Link from \"next/link\";\r\n\r\ntype PaginationProps = {\r\n  currentPage: number;\r\n  totalPages: number;\r\n  baseUrl: string;\r\n};\r\n\r\nfunction getPageNumbers(currentPage: number, totalPages: number, maxVisible: number = 7): (number | string)[] {\r\n  const pages: (number | string)[] = [];\r\n\r\n  if (totalPages <= maxVisible) {\r\n    for (let i = 1; i <= totalPages; i++) {\r\n      pages.push(i);\r\n    }\r\n  } else {\r\n    // Always show first page\r\n    pages.push(1);\r\n\r\n    const windowSize = maxVisible - 2; // excluding first and last page\r\n    let start = Math.max(currentPage - Math.floor(windowSize / 2), 2);\r\n    let end = start + windowSize - 1;\r\n\r\n    if (end >= totalPages) {\r\n      end = totalPages - 1;\r\n      start = end - windowSize + 1;\r\n    }\r\n\r\n    if (start > 2) {\r\n      pages.push(\"...\");\r\n    }\r\n\r\n    for (let i = start; i <= end; i++) {\r\n      pages.push(i);\r\n    }\r\n\r\n    if (end < totalPages - 1) {\r\n      pages.push(\"...\");\r\n    }\r\n\r\n    pages.push(totalPages);\r\n  }\r\n\r\n  return pages;\r\n}\r\n\r\nconst Pagination = ({ currentPage, totalPages, baseUrl }: PaginationProps) => {\r\n  const pages = getPageNumbers(currentPage, totalPages);\r\n\r\n  return (\r\n    <nav className={'mt-4 flex justify-center'}>\r\n      <ul className={'flex list-none'}>\r\n        {pages.map((page, index) => (\r\n          <li key={index} className={'mx-1'}>\r\n            {typeof page === \"number\" ? (\r\n              <Link\r\n                href={`${baseUrl}&page=${page}`}\r\n                className={`px-3 py-1 border rounded hover:bg-secondary transition ${\r\n                  page === currentPage ? \"bg-secondary text-white\" : \"bg-terciary text-white\"\r\n                }`}\r\n              >\r\n                {page}\r\n              </Link>\r\n            ) : (\r\n              <span className={'px-3 py-1'}>...</span>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n"],"names":[],"mappings":";;;;AAAA;;;AAQA,SAAS,eAAe,WAAmB,EAAE,UAAkB,EAAE,aAAqB,CAAC;IACrF,MAAM,QAA6B,EAAE;IAErC,IAAI,cAAc,YAAY;QAC5B,IAAK,IAAI,IAAI,GAAG,KAAK,YAAY,IAAK;YACpC,MAAM,IAAI,CAAC;QACb;IACF,OAAO;QACL,yBAAyB;QACzB,MAAM,IAAI,CAAC;QAEX,MAAM,aAAa,aAAa,GAAG,gCAAgC;QACnE,IAAI,QAAQ,KAAK,GAAG,CAAC,cAAc,KAAK,KAAK,CAAC,aAAa,IAAI;QAC/D,IAAI,MAAM,QAAQ,aAAa;QAE/B,IAAI,OAAO,YAAY;YACrB,MAAM,aAAa;YACnB,QAAQ,MAAM,aAAa;QAC7B;QAEA,IAAI,QAAQ,GAAG;YACb,MAAM,IAAI,CAAC;QACb;QAEA,IAAK,IAAI,IAAI,OAAO,KAAK,KAAK,IAAK;YACjC,MAAM,IAAI,CAAC;QACb;QAEA,IAAI,MAAM,aAAa,GAAG;YACxB,MAAM,IAAI,CAAC;QACb;QAEA,MAAM,IAAI,CAAC;IACb;IAEA,OAAO;AACT;AAEA,MAAM,aAAa,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,EAAmB;IACvE,MAAM,QAAQ,eAAe,aAAa;IAE1C,qBACE,8OAAC;QAAI,WAAW;kBACd,cAAA,8OAAC;YAAG,WAAW;sBACZ,MAAM,GAAG,CAAC,CAAC,MAAM,sBAChB,8OAAC;oBAAe,WAAW;8BACxB,OAAO,SAAS,yBACf,8OAAC,4JAAA,CAAA,UAAI;wBACH,MAAM,GAAG,QAAQ,MAAM,EAAE,MAAM;wBAC/B,WAAW,CAAC,uDAAuD,EACjE,SAAS,cAAc,4BAA4B,0BACnD;kCAED;;;;;6CAGH,8OAAC;wBAAK,WAAW;kCAAa;;;;;;mBAXzB;;;;;;;;;;;;;;;AAkBnB;uCAEe","debugId":null}},
    {"offset": {"line": 534, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 540, "column": 0}, "map": {"version":3,"sources":["file://F%3A/0-F-Programming/1-portfolio/1-nextjs-projects/1-nextjs-users-api/src/utils/filter-and-paginate.tsx"],"sourcesContent":["export type ColumnDefinition = {\r\n    key: string;\r\n    header: string;\r\n    isImage?: boolean;\r\n};\r\n\r\nexport type FilterAndPaginateParams<T> = {\r\n    data: T[];\r\n    allColumns: ColumnDefinition[];\r\n    searchParams: {\r\n        filterColumn?: string;\r\n        filterValue?: string;\r\n        sortColumn?: string;\r\n        sortOrder?: 'asc' | 'desc';\r\n        page?: string;\r\n        columns?: string | string[];\r\n        itemsPerPage?: string;\r\n    };\r\n    getValueByKey?: (obj: T, keyPath: string) => unknown;\r\n};\r\n\r\nexport type FilterAndPaginateResult<T> = {\r\n    columnsToDisplay: ColumnDefinition[];\r\n    currentItems: T[];\r\n    currentPage: number;\r\n    totalPages: number;\r\n    buildBaseUrl: () => string;\r\n    filterColumn: string;\r\n    filterValue: string;\r\n    selectedColumns: string[];\r\n    itemsPerPage: number;\r\n    sortColumn: string;\r\n    sortOrder: 'asc' | 'desc';\r\n};\r\n\r\nexport function filterAndPaginate<T>({\r\n                                         data,\r\n                                         allColumns,\r\n                                         searchParams,\r\n                                         getValueByKey = defaultGetValueByKey,\r\n                                     }: FilterAndPaginateParams<T>): FilterAndPaginateResult<T> {\r\n    const filterColumn = searchParams.filterColumn || 'all';\r\n    const filterValue = (searchParams.filterValue || '').toLowerCase();\r\n    const sortColumn = searchParams.sortColumn || 'none';\r\n    const sortOrder: 'asc' | 'desc' = searchParams.sortOrder === 'desc' ? 'desc' : 'asc';\r\n    const currentPage = searchParams.page ? Number(searchParams.page) : 1;\r\n    const parsedItemsPerPage = searchParams.itemsPerPage ? Number(searchParams.itemsPerPage) : 5;\r\n    const itemsPerPage = isNaN(parsedItemsPerPage) || parsedItemsPerPage <= 0 ? 5 : parsedItemsPerPage;\r\n\r\n    let selectedColumns: string[] = [];\r\n    if (searchParams.columns) {\r\n        if (Array.isArray(searchParams.columns)) {\r\n            selectedColumns = searchParams.columns.filter(Boolean);\r\n        } else {\r\n            selectedColumns = searchParams.columns.split(',').filter(Boolean);\r\n        }\r\n    }\r\n\r\n    const columnsToDisplay =\r\n        selectedColumns.length > 0\r\n            ? allColumns.filter((col) => selectedColumns.includes(col.key))\r\n            : allColumns;\r\n\r\n    let filteredData = data;\r\n    if (filterValue) {\r\n        if (filterColumn !== 'all') {\r\n            filteredData = filteredData.filter((item) => {\r\n                const value = getValueByKey(item, filterColumn);\r\n                return String(value).toLowerCase().includes(filterValue);\r\n            });\r\n        } else {\r\n            filteredData = filteredData.filter((item) =>\r\n                columnsToDisplay.some((col) => {\r\n                    const value = getValueByKey(item, col.key);\r\n                    return String(value).toLowerCase().includes(filterValue);\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    if (sortColumn !== 'none') {\r\n        filteredData.sort((a, b) => {\r\n            const aVal = getValueByKey(a, sortColumn);\r\n            const bVal = getValueByKey(b, sortColumn);\r\n            const aStr = String(aVal).toLowerCase();\r\n            const bStr = String(bVal).toLowerCase();\r\n            if (aStr < bStr) return sortOrder === 'asc' ? -1 : 1;\r\n            if (aStr > bStr) return sortOrder === 'asc' ? 1 : -1;\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    const totalItems = filteredData.length;\r\n    const totalPages = Math.ceil(totalItems / itemsPerPage);\r\n    const startIndex = (currentPage - 1) * itemsPerPage;\r\n    const currentItems = filteredData.slice(startIndex, startIndex + itemsPerPage);\r\n\r\n    function buildBaseUrl(): string {\r\n        const params = new URLSearchParams();\r\n        if (filterColumn) params.set('filterColumn', filterColumn);\r\n        if (filterValue) params.set('filterValue', filterValue);\r\n        if (sortColumn && sortColumn !== 'none') {\r\n            params.set('sortColumn', sortColumn);\r\n            params.set('sortOrder', sortOrder);\r\n        }\r\n        if (selectedColumns.length > 0) params.set('columns', selectedColumns.join(','));\r\n        params.set('itemsPerPage', String(itemsPerPage));\r\n        return `?${params.toString()}`;\r\n    }\r\n\r\n    return {\r\n        columnsToDisplay,\r\n        currentItems,\r\n        currentPage,\r\n        totalPages,\r\n        buildBaseUrl,\r\n        filterColumn,\r\n        filterValue,\r\n        selectedColumns,\r\n        itemsPerPage,\r\n        sortColumn,\r\n        sortOrder,\r\n    };\r\n}\r\n\r\nfunction defaultGetValueByKey<T>(obj: T, keyPath: string): unknown {\r\n    if (!keyPath.includes('.')) {\r\n        return (obj as Record<string, unknown>)[keyPath];\r\n    }\r\n    const parts = keyPath.split('.');\r\n    let value: unknown = obj;\r\n    for (const part of parts) {\r\n        if (typeof value === 'object' && value !== null) {\r\n            value = (value as Record<string, unknown>)[part];\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n    return value;\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 630, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 636, "column": 0}, "map": {"version":3,"sources":["file://F%3A/0-F-Programming/1-portfolio/1-nextjs-projects/1-nextjs-users-api/src/components/truncated-text/truncated-text.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/truncated-text/truncated-text.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/truncated-text/truncated-text.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoT,GACjV,kFACA","debugId":null}},
    {"offset": {"line": 644, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 650, "column": 0}, "map": {"version":3,"sources":["file://F%3A/0-F-Programming/1-portfolio/1-nextjs-projects/1-nextjs-users-api/src/components/truncated-text/truncated-text.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/truncated-text/truncated-text.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/truncated-text/truncated-text.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgS,GAC7T,8DACA","debugId":null}},
    {"offset": {"line": 658, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 664, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 668, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 674, "column": 0}, "map": {"version":3,"sources":["file://F%3A/0-F-Programming/1-portfolio/1-nextjs-projects/1-nextjs-users-api/src/components/only-table/only-table.tsx"],"sourcesContent":["import { get as _get } from 'lodash';\r\nimport Image from 'next/image';\r\nimport type { ReactNode } from 'react';\r\nimport TruncatedText from '@/components/truncated-text/truncated-text';\r\n\r\nexport type ColumnDefinition = {\r\n    key: string;\r\n    header: string;\r\n    isImage?: boolean;\r\n};\r\n\r\nexport type OnlyTableProps<T> = {\r\n    data: T[];\r\n    columns: ColumnDefinition[];\r\n};\r\n\r\nexport default function OnlyTable<T>({ data, columns }: OnlyTableProps<T>) {\r\n    return (\r\n        <div className={\"overflow-x-auto\"}>\r\n            <table className={\"min-w-full border border-gray-200\"}>\r\n                <thead className={\"bg-secondary\"}>\r\n                <tr>\r\n                    {columns.map((col) => (\r\n                        <th key={col.key} className={\"p-2 border\"}>\r\n                            {col.header}\r\n                        </th>\r\n                    ))}\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {Array.isArray(data) && data.length > 0 ? (\r\n                    data.map((item, rowIndex) => (\r\n                        <tr key={rowIndex} className={\"text-center\"}>\r\n                            {columns.map((col) => {\r\n                                const value = _get(item, col.key);\r\n                                let cellContent: ReactNode;\r\n\r\n                                if (col.isImage && typeof value === 'string') {\r\n                                    cellContent = (\r\n                                      <Image\r\n                                        src={value}\r\n                                        alt=\"flag\"\r\n                                        width={30}\r\n                                        height={30}\r\n                                      />\r\n\r\n                                    );\r\n                                } else {\r\n                                    cellContent = value !== undefined ? String(value) : '-';\r\n                                }\r\n\r\n                                return (\r\n                                  <td key={col.key} className={'p-2 border whitespace-pre-line'}>\r\n                                      {typeof cellContent === 'string' ? (\r\n                                        <TruncatedText text={cellContent} maxLength={30} />\r\n                                      ) : (\r\n                                        cellContent\r\n                                      )}\r\n                                  </td>\r\n                                );\r\n                            })}\r\n                        </tr>\r\n                    ))\r\n                ) : (\r\n                    <tr>\r\n                        <td colSpan={columns.length} className=\"{p-2 text-center}\">\r\n                            No se encontraron datos.\r\n                        </td>\r\n                    </tr>\r\n                )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AAEA;;;;;AAae,SAAS,UAAa,EAAE,IAAI,EAAE,OAAO,EAAqB;IACrE,qBACI,8OAAC;QAAI,WAAW;kBACZ,cAAA,8OAAC;YAAM,WAAW;;8BACd,8OAAC;oBAAM,WAAW;8BAClB,cAAA,8OAAC;kCACI,QAAQ,GAAG,CAAC,CAAC,oBACV,8OAAC;gCAAiB,WAAW;0CACxB,IAAI,MAAM;+BADN,IAAI,GAAG;;;;;;;;;;;;;;;8BAMxB,8OAAC;8BACA,MAAM,OAAO,CAAC,SAAS,KAAK,MAAM,GAAG,IAClC,KAAK,GAAG,CAAC,CAAC,MAAM,yBACZ,8OAAC;4BAAkB,WAAW;sCACzB,QAAQ,GAAG,CAAC,CAAC;gCACV,MAAM,QAAQ,CAAA,GAAA,6HAAA,CAAA,UAAI,AAAD,EAAE,MAAM,IAAI,GAAG;gCAChC,IAAI;gCAEJ,IAAI,IAAI,OAAO,IAAI,OAAO,UAAU,UAAU;oCAC1C,4BACE,8OAAC,6HAAA,CAAA,UAAK;wCACJ,KAAK;wCACL,KAAI;wCACJ,OAAO;wCACP,QAAQ;;;;;;gCAIhB,OAAO;oCACH,cAAc,UAAU,YAAY,OAAO,SAAS;gCACxD;gCAEA,qBACE,8OAAC;oCAAiB,WAAW;8CACxB,OAAO,gBAAgB,yBACtB,8OAAC,4JAAA,CAAA,UAAa;wCAAC,MAAM;wCAAa,WAAW;;;;;+CAE7C;mCAJG,IAAI,GAAG;;;;;4BAQtB;2BA5BK;;;;kDAgCb,8OAAC;kCACG,cAAA,8OAAC;4BAAG,SAAS,QAAQ,MAAM;4BAAE,WAAU;sCAAoB;;;;;;;;;;;;;;;;;;;;;;;;;;;AASnF","debugId":null}},
    {"offset": {"line": 784, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 790, "column": 0}, "map": {"version":3,"sources":["file://F%3A/0-F-Programming/1-portfolio/1-nextjs-projects/1-nextjs-users-api/src/components/paginated-table/paginated-table.tsx"],"sourcesContent":["import React from 'react';\r\nimport FilterForm from '@/components/filter-form/filter-form'\r\nimport Pagination from '@/components/pagination/pagination';\r\nimport { filterAndPaginate, ColumnDefinition } from '@/utils/filter-and-paginate';\r\nimport { ResolvedSearchParams } from '@/types/search-params';\r\nimport OnlyTable from '@/components/only-table/only-table'\r\n\r\ntype PaginatedTableProps<T> = {\r\n    data: T[];\r\n    allColumns: ColumnDefinition[];\r\n    searchParams: ResolvedSearchParams;\r\n    title: string;\r\n    baseUrl: string;\r\n    TableComponent: React.ComponentType<{ data: T[]; columns: ColumnDefinition[] }>;\r\n}\r\n\r\nexport async function PaginatedTable<T>({\r\n                                      data,\r\n                                      allColumns,\r\n                                      searchParams,\r\n                                      title,\r\n                                      baseUrl,\r\n                                  }: PaginatedTableProps<T>) {\r\n\r\n    const {\r\n        columnsToDisplay,\r\n        currentItems,\r\n        currentPage,\r\n        totalPages,\r\n        buildBaseUrl,\r\n        filterColumn,\r\n        filterValue,\r\n        selectedColumns,\r\n        itemsPerPage,\r\n        sortColumn,\r\n        sortOrder,\r\n    } = filterAndPaginate({\r\n        data,\r\n        allColumns,\r\n      searchParams,\r\n    });\r\n\r\n    return (\r\n        <div className={\"mt-26 px-11 lg:px-16 pb-10\"}>\r\n            <h1 className={\"text-2xl font-bold mb-4\"}>{title}</h1>\r\n\r\n            <FilterForm\r\n                allColumns={allColumns}\r\n                filterColumn={filterColumn}\r\n                filterValue={filterValue}\r\n                selectedColumns={selectedColumns}\r\n                itemsPerPage={itemsPerPage}\r\n                sortColumn={sortColumn}\r\n                sortOrder={sortOrder}\r\n            />\r\n\r\n            <OnlyTable data={currentItems} columns={columnsToDisplay} />\r\n\r\n            <Pagination\r\n                currentPage={currentPage}\r\n                totalPages={totalPages}\r\n                baseUrl={`${baseUrl}${buildBaseUrl()}`}\r\n            />\r\n        </div>\r\n    );\r\n}"],"names":[],"mappings":";;;;AACA;AACA;AACA;AAEA;;;;;;AAWO,eAAe,eAAkB,EACF,IAAI,EACJ,UAAU,EACV,YAAY,EACZ,KAAK,EACL,OAAO,EACc;IAEvD,MAAM,EACF,gBAAgB,EAChB,YAAY,EACZ,WAAW,EACX,UAAU,EACV,YAAY,EACZ,YAAY,EACZ,WAAW,EACX,eAAe,EACf,YAAY,EACZ,UAAU,EACV,SAAS,EACZ,GAAG,CAAA,GAAA,0IAAA,CAAA,oBAAiB,AAAD,EAAE;QAClB;QACA;QACF;IACF;IAEA,qBACI,8OAAC;QAAI,WAAW;;0BACZ,8OAAC;gBAAG,WAAW;0BAA4B;;;;;;0BAE3C,8OAAC,sJAAA,CAAA,UAAU;gBACP,YAAY;gBACZ,cAAc;gBACd,aAAa;gBACb,iBAAiB;gBACjB,cAAc;gBACd,YAAY;gBACZ,WAAW;;;;;;0BAGf,8OAAC,oJAAA,CAAA,UAAS;gBAAC,MAAM;gBAAc,SAAS;;;;;;0BAExC,8OAAC,8IAAA,CAAA,UAAU;gBACP,aAAa;gBACb,YAAY;gBACZ,SAAS,GAAG,UAAU,gBAAgB;;;;;;;;;;;;AAItD","debugId":null}},
    {"offset": {"line": 857, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 863, "column": 0}, "map": {"version":3,"sources":["file://F%3A/0-F-Programming/1-portfolio/1-nextjs-projects/1-nextjs-users-api/src/types/search-params.tsx"],"sourcesContent":["export type ResolvedSearchParams = {\r\n    filterColumn?: string;\r\n    filterValue?: string;\r\n    sortColumn?: string;\r\n    sortOrder?: 'asc' | 'desc';\r\n    page?: string;\r\n    columns?: string | string[];\r\n    itemsPerPage?: string;\r\n};\r\n\r\nexport type SearchParams = Promise<Record<string, string | string[] | undefined>>;\r\n\r\nexport async function resolveSearchParams(\r\n  searchParams: SearchParams\r\n): Promise<ResolvedSearchParams> {\r\n    const resolved = await searchParams;\r\n    return {\r\n        filterColumn: resolved.filterColumn as string | undefined,\r\n        filterValue: resolved.filterValue as string | undefined,\r\n        sortColumn: resolved.sortColumn as string | undefined,\r\n        sortOrder: resolved.sortOrder as 'asc' | 'desc' | undefined,\r\n        page: resolved.page as string | undefined,\r\n        columns: resolved.columns as string | string[] | undefined,\r\n        itemsPerPage: resolved.itemsPerPage as string | undefined,\r\n    };\r\n}"],"names":[],"mappings":";;;AAYO,eAAe,oBACpB,YAA0B;IAExB,MAAM,WAAW,MAAM;IACvB,OAAO;QACH,cAAc,SAAS,YAAY;QACnC,aAAa,SAAS,WAAW;QACjC,YAAY,SAAS,UAAU;QAC/B,WAAW,SAAS,SAAS;QAC7B,MAAM,SAAS,IAAI;QACnB,SAAS,SAAS,OAAO;QACzB,cAAc,SAAS,YAAY;IACvC;AACJ","debugId":null}},
    {"offset": {"line": 878, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 884, "column": 0}, "map": {"version":3,"sources":["file://F%3A/0-F-Programming/1-portfolio/1-nextjs-projects/1-nextjs-users-api/src/app/%28overview%29/users/%5Bid%5D/todos/page.tsx"],"sourcesContent":["import { getTodosByUserId } from '@/services/user.service';\r\nimport { ColumnDefinition } from '@/utils/filter-and-paginate';\r\nimport { PaginatedTable } from '@/components/paginated-table/paginated-table';\r\nimport OnlyTable from '@/components/only-table/only-table';\r\nimport { SearchParams, resolveSearchParams, ResolvedSearchParams } from '@/types/search-params';\r\n\r\nexport default async function TodosPage({\r\n                                          params,\r\n                                          searchParams,\r\n                                        }: { params: { id: string }; searchParams: SearchParams }) {\r\n  // Resolve searchParams into a plain object of type ResolvedSearchParams\r\n  const resolvedParams: ResolvedSearchParams = await resolveSearchParams(searchParams);\r\n  const todos = await getTodosByUserId(params.id);\r\n\r\n  const allColumns: ColumnDefinition[] = [\r\n    { key: 'id', header: 'ID' },\r\n    { key: 'title', header: 'Todo Title' },\r\n    { key: 'completed', header: 'Completed' },\r\n  ];\r\n\r\n  return (\r\n    <PaginatedTable\r\n      data={todos}\r\n      allColumns={allColumns}\r\n      searchParams={resolvedParams}\r\n      title={`User ${params.id} Todos`}\r\n      baseUrl={`/users/${params.id}/todos`}\r\n      TableComponent={OnlyTable}\r\n    />\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;;;;;;AAEe,eAAe,UAAU,EACE,MAAM,EACN,YAAY,EAC2C;IAC/F,wEAAwE;IACxE,MAAM,iBAAuC,MAAM,CAAA,GAAA,iIAAA,CAAA,sBAAmB,AAAD,EAAE;IACvE,MAAM,QAAQ,MAAM,CAAA,GAAA,kIAAA,CAAA,mBAAgB,AAAD,EAAE,OAAO,EAAE;IAE9C,MAAM,aAAiC;QACrC;YAAE,KAAK;YAAM,QAAQ;QAAK;QAC1B;YAAE,KAAK;YAAS,QAAQ;QAAa;QACrC;YAAE,KAAK;YAAa,QAAQ;QAAY;KACzC;IAED,qBACE,8OAAC,8JAAA,CAAA,iBAAc;QACb,MAAM;QACN,YAAY;QACZ,cAAc;QACd,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,MAAM,CAAC;QAChC,SAAS,CAAC,OAAO,EAAE,OAAO,EAAE,CAAC,MAAM,CAAC;QACpC,gBAAgB,oJAAA,CAAA,UAAS;;;;;;AAG/B","debugId":null}},
    {"offset": {"line": 928, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}